{"version":3,"file":"index.js","sources":["../dist-src/services/authentication.js","../dist-src/services/encryption.js","../dist-src/services/vehicle.js","../dist-src/routes/readiness.js","../dist-src/routes/general/status.js","../dist-src/routes/general/version.js","../dist-src/routes/login.js","../dist-src/routes/vehicles.js","../dist-src/index.js"],"sourcesContent":["import Logger from '@harmonyjs/logger';\nfunction AuthenticationService() {\n    const instance = ({\n        logger: Logger({ name: 'Authentication', configuration: { console: true } }),\n        account: null,\n        configure(account) {\n            this.account = account;\n        },\n        async authenticateAccount(args) {\n            try {\n                // Decode JSON\n                const decoded = await args.req.jwtVerify();\n                if (decoded?.payload?.userId) {\n                    // Verify account is present\n                    if ((!this.account) || (decoded.payload.userId === this.account.id)) {\n                        const user = this.account;\n                        return Object.assign(args.req, { user });\n                    }\n                }\n                // Error\n                return args.res.code(500).send({\n                    statusCode: 500,\n                    error: 'Internal Server Error',\n                });\n            }\n            catch (e) {\n                return args.res.code(401).send({\n                    statusCode: 401,\n                    error: 'Credentials invalid',\n                    message: e.message,\n                });\n            }\n        },\n    });\n    return instance;\n}\nexport default AuthenticationService();\n","// @ts-ignore\nimport aes256 from 'aes256';\nfunction EncryptionService() {\n    const instance = ({\n        secret: '',\n        configure(configuration) {\n            this.secret = configuration.secret;\n        },\n        encryptPassword(args) {\n            return aes256.encrypt(this.secret, args.password + args.salt).toString();\n        },\n        comparePassword(args) {\n            return aes256.decrypt(this.secret, args.encrypted) === (args.password + args.salt);\n        },\n    });\n    return instance;\n}\nexport default EncryptionService();\n","import polyline from '@mapbox/polyline';\nimport turf from '@turf/turf';\nimport moment from 'moment';\nimport Logger from \"@harmonyjs/logger\";\nconst UPDATE_INTERVAL = 1000;\nconst SPEED_VARIATION = 2;\nconst TEMPERATURE_VARIATION = 1;\nfunction VehicleService() {\n    const instance = ({\n        logger: Logger({ name: 'Vehicle', configuration: { console: true } }),\n        vehicles: [],\n        configure(vehicles) {\n            // Initialize vehicles\n            this.initializeVehicles(vehicles);\n            // Update vehicles\n            setInterval(() => this.updateVehicles(), UPDATE_INTERVAL);\n        },\n        initializeVehicles(vehicles) {\n            this.vehicles = vehicles.map((vehicle) => {\n                const coordinates = polyline.decode(vehicle.polyline);\n                const line = turf.lineString(coordinates);\n                const options = { units: 'meters' };\n                const location = turf.along(line, 0, options);\n                return {\n                    ...vehicle,\n                    defaultSpeed: vehicle.speed,\n                    defaultTemperature: vehicle.temperature,\n                    location: location.geometry.coordinates,\n                    line,\n                    distance: 0,\n                };\n            });\n        },\n        updateVehicles() {\n            this.vehicles.forEach((vehicle) => {\n                // Update only if vehicle is active\n                if (vehicle.online) {\n                    // Update vehicle position\n                    const options = { units: 'meters' };\n                    const location = turf.along(vehicle.line, vehicle.distance, options);\n                    vehicle.location = location.geometry.coordinates;\n                    // Increment traveled distance\n                    const metersTraveled = vehicle.defaultSpeed / 3.6;\n                    vehicle.distance += metersTraveled;\n                    // Reinitialize position at end of route\n                    const routeLength = turf.length(vehicle.line, { units: 'meters' });\n                    if (vehicle.distance >= routeLength) {\n                        vehicle.distance = 0;\n                    }\n                    // Random speed\n                    const minSpeed = vehicle.defaultSpeed - SPEED_VARIATION;\n                    const maxSpeed = vehicle.defaultSpeed + SPEED_VARIATION;\n                    vehicle.speed = Math.floor(Math.random() * (maxSpeed - minSpeed + 1) + minSpeed);\n                    // Random temperature\n                    const minTemperature = vehicle.defaultTemperature - TEMPERATURE_VARIATION;\n                    const maxTemperature = vehicle.defaultTemperature + TEMPERATURE_VARIATION;\n                    vehicle.temperature = Math.floor(Math.random() * (maxTemperature - minTemperature + 1)\n                        + minTemperature);\n                    // Last update time\n                    vehicle.lastUpdate = moment().toISOString();\n                }\n                else {\n                    vehicle.speed = 0;\n                }\n            });\n        },\n        getDrivers() {\n            return this.vehicles;\n        },\n        setVehicleOnline(id) {\n            const vehicle = this.vehicles.find((vehicle) => vehicle.id === id);\n            if (!vehicle) {\n                throw new Error('vehicle_not_found');\n            }\n            vehicle.online = true;\n            this.logger.info(`Vehicle ${id} online`);\n        },\n        setVehicleOffline(id) {\n            const vehicle = this.vehicles.find((vehicle) => vehicle.id === id);\n            if (!vehicle) {\n                throw new Error('vehicle_not_found');\n            }\n            vehicle.online = false;\n            this.logger.info(`Vehicle ${id} offline`);\n        },\n    });\n    return instance;\n}\nexport default VehicleService();\n","const ReadinessRoute = {\n    method: 'GET',\n    url: '/',\n    async handler() {\n        return true;\n    },\n};\nexport default ReadinessRoute;\n","const GeneralStatusRoute = {\n    method: 'GET',\n    url: '/general/status',\n    async handler() {\n        const response = {\n            environment: 'PRODUCTION',\n            status: 'OK',\n        };\n        return response;\n    },\n};\nexport default GeneralStatusRoute;\n","const GeneralVersionRoute = {\n    method: 'GET',\n    url: '/general/version',\n    async handler() {\n        const response = {\n            buildDate: '17/05/2020 19:00:00 +02:00',\n            buildVersion: '1.0.0',\n            apiVersion: 'v1',\n        };\n        return response;\n    },\n};\nexport default GeneralVersionRoute;\n","import Logger from '@harmonyjs/logger';\nimport EncryptionService from '../services/encryption'\nconst logger = Logger({\n    name: 'AccountLogin',\n    configuration: {\n        console: true,\n    },\n});\nconst LoginRoute = async (server, opts, next) => {\n    server.route({\n        method: 'POST',\n        url: '/login',\n        async handler(req, res) {\n            try {\n                const { user, password } = req.body;\n                // Check user\n                if ((!user) || (user.trim().length === 0)) {\n                    return res.code(400).send({\n                        statusCode: 400,\n                        error: 'Bad Request',\n                        message: 'internal_error',\n                    });\n                }\n                // Check password\n                if ((!password) || (password.trim().length === 0)) {\n                    return res.code(400).send({\n                        statusCode: 400,\n                        error: 'Bad Request',\n                        message: 'internal_error',\n                    });\n                }\n                // Get account\n                const account = req.conf.account;\n                // Verify account is present\n                if ((!account) || (user !== account.email)) {\n                    return res.code(401).send({\n                        statusCode: 401,\n                        error: 'Bad Request',\n                        message: 'user_not_found',\n                    });\n                }\n                // Decrypt password\n                const passwordMatch = EncryptionService.comparePassword({\n                    password,\n                    salt: account.id,\n                    encrypted: account.password,\n                });\n                // Check password\n                if (!passwordMatch) {\n                    return res.code(401).send({\n                        statusCode: 401,\n                        error: 'Bad Request',\n                        message: 'wrong_credentials',\n                    });\n                }\n                // Generate jwtToken\n                const payload = {\n                    userId: account.id,\n                    name: account.name,\n                    isAdmin: false,\n                };\n                const token = server.jwt.sign({ payload });\n                return res.code(200).send({ token });\n            }\n            catch (err) {\n                logger.error('Error', err);\n                return res.code(500).send({\n                    statusCode: 500,\n                    error: 'Internal Server Error',\n                });\n            }\n        },\n    });\n    next();\n};\nexport default LoginRoute;\n","import Logger from '@harmonyjs/logger';\nimport VehicleService from '../services/vehicle'\nconst logger = Logger({\n    name: 'Vehicles',\n    configuration: {\n        console: true,\n    },\n});\nconst VehiclesRoute = async (server, opts, next) => {\n    // Get Vehicles\n    server.route({\n        method: 'GET',\n        url: '/vehicles',\n        preHandler: server.auth([server.authenticateAccount]),\n        async handler(req, res) {\n            try {\n                const vehicles = VehicleService.getDrivers().map((vehicle) => {\n                    return {\n                        id: vehicle.id,\n                        name: vehicle.name,\n                        vehicle: vehicle.vehicle,\n                        speed: vehicle.speed,\n                        temperature: vehicle.temperature,\n                        location: vehicle.location,\n                        lastUpdate: vehicle.lastUpdate,\n                        plate: vehicle.plate,\n                        online: vehicle.online,\n                    };\n                });\n                return vehicles;\n            }\n            catch (err) {\n                logger.error('Error', err);\n                return res.code(500).send({\n                    statusCode: 500,\n                    error: 'Internal Server Error',\n                });\n            }\n        },\n    });\n    // Set vehicle online\n    server.route({\n        method: 'POST',\n        url: '/vehicles/online/:id',\n        preHandler: server.auth([server.authenticateAccount]),\n        async handler(req, res) {\n            try {\n                VehicleService.setVehicleOnline(req.params.id);\n                return {};\n            }\n            catch (err) {\n                logger.error('Error', err);\n                return res.code(500).send({\n                    statusCode: 500,\n                    error: 'Internal Server Error',\n                });\n            }\n        },\n    });\n    // Set vehicle offline\n    server.route({\n        method: 'POST',\n        url: '/vehicles/offline/:id',\n        preHandler: server.auth([server.authenticateAccount]),\n        async handler(req, res) {\n            try {\n                VehicleService.setVehicleOffline(req.params.id);\n                return {};\n            }\n            catch (err) {\n                logger.error('Error', err);\n                return res.code(500).send({\n                    statusCode: 500,\n                    error: 'Internal Server Error',\n                });\n            }\n        },\n    });\n    next();\n};\nexport default VehiclesRoute;\n","import path from 'path';\nimport fs from 'fs';\nimport jsYaml from 'js-yaml';\nimport Fastify from 'fastify';\nimport FastifyCors from 'fastify-cors';\nimport FastifyAuth from 'fastify-auth';\nimport FastifyJWT from 'fastify-jwt';\nimport Logger from '@harmonyjs/logger';\nimport AuthenticationService from './services/authentication'\nimport EncryptionService from './services/encryption'\nimport VehicleService from './services/vehicle'\nimport ReadinessRoute from './routes/readiness'\nimport GeneralStatusRoute from './routes/general/status'\nimport GeneralVersionRoute from './routes/general/version'\nimport LoginRoute from './routes/login'\nimport VehiclesRoute from './routes/vehicles'\nasync function loadLogger() {\n    return Logger({\n        name: 'ApplicationImport',\n        configuration: {\n            console: true,\n        },\n    });\n}\nasync function loadConfiguration(confPath, logger) {\n    logger.info('Loading configuration');\n    let confAsYaml = null;\n    try {\n        confAsYaml = fs.readFileSync(confPath, 'utf-8');\n    }\n    catch (err) {\n        logger.error('Unable to load configuration. Exiting.');\n        process.exit(0);\n    }\n    const conf = jsYaml.safeLoad(confAsYaml);\n    logger.info('Configuration loaded');\n    return conf.app;\n}\nasync function launchServer(conf, logger) {\n    logger.info('Launching server');\n    const server = Fastify();\n    server.register(FastifyCors);\n    server.register(FastifyAuth);\n    server.register(FastifyJWT, {\n        secret: conf.encryption?.secret,\n        sign: {\n            algorithm: 'HS512',\n            expiresIn: conf.authentication?.expiresIn ? conf.authentication.expiresIn : '1 hour',\n        },\n    });\n    // Readiness endpoint\n    server.route(ReadinessRoute);\n    // Mount general endpoints\n    server.route(GeneralStatusRoute);\n    server.route(GeneralVersionRoute);\n    // Endpoints\n    server.register(LoginRoute);\n    server.register(VehiclesRoute);\n    // Add conf\n    server.decorateRequest('conf', conf);\n    // Authenticate methods\n    server.decorate('authenticateAccount', (req, res, done) => AuthenticationService.authenticateAccount({ req, res, done }));\n    await server.listen(conf.server.port, conf.server.host);\n    logger.info(`Server ready at ${conf.server.host}:${conf.server.port}`);\n}\nasync function run() {\n    const logger = await loadLogger();\n    const conf = await loadConfiguration(path.resolve('../conf/application.yml'), logger);\n    // Configure services\n    if (conf.encryption) {\n        EncryptionService.configure(conf.encryption);\n    }\n    if (conf.account) {\n        AuthenticationService.configure(conf.account);\n    }\n    if (conf.vehicles) {\n        VehicleService.configure(conf.vehicles);\n    }\n    await launchServer(conf, logger);\n}\nrun()\n    .catch((err) => {\n    console.error('Fatal error: ');\n    console.error(err);\n    process.exit(-1);\n});\n"],"names":["AuthenticationService","instance","logger","Logger","name","configuration","console","account","configure","authenticateAccount","args","decoded","req","jwtVerify","payload","userId","id","user","Object","assign","res","code","send","statusCode","error","e","message","EncryptionService","secret","encryptPassword","aes256","encrypt","password","salt","toString","comparePassword","decrypt","encrypted","UPDATE_INTERVAL","SPEED_VARIATION","TEMPERATURE_VARIATION","VehicleService","vehicles","initializeVehicles","setInterval","updateVehicles","map","vehicle","coordinates","polyline","decode","line","turf","lineString","options","units","location","along","defaultSpeed","speed","defaultTemperature","temperature","geometry","distance","forEach","online","metersTraveled","routeLength","length","minSpeed","maxSpeed","Math","floor","random","minTemperature","maxTemperature","lastUpdate","moment","toISOString","getDrivers","setVehicleOnline","find","Error","info","setVehicleOffline","ReadinessRoute","method","url","handler","GeneralStatusRoute","response","environment","status","GeneralVersionRoute","buildDate","buildVersion","apiVersion","LoginRoute","server","opts","next","route","body","trim","conf","email","passwordMatch","isAdmin","token","jwt","sign","err","VehiclesRoute","preHandler","auth","plate","params","loadLogger","loadConfiguration","confPath","confAsYaml","fs","readFileSync","process","exit","jsYaml","safeLoad","app","launchServer","Fastify","register","FastifyCors","FastifyAuth","FastifyJWT","encryption","algorithm","expiresIn","authentication","decorateRequest","decorate","done","listen","port","host","run","path","resolve","catch"],"mappings":"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"}